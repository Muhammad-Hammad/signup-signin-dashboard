[{"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\Signup.js":"1","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\index.js":"2","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\App.js":"3","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\configureStore.js":"4","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\firebase\\firebase.js":"5","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\root.js":"6","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\actions\\index.js":"7","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\Constants\\index.js":"8","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\reportWebVitals.js":"9","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\actions\\auth.js":"10","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\reducers\\index.js":"11","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\App.test.js":"12","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\Login.js":"13","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\loader.js":"14","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\ProtectedRoute.js":"15","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\Validation\\Validation.js":"16","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\Home.js":"17","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\reducers\\auth.js":"18","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\forgotPassword.js":"19"},{"size":9025,"mtime":1611316300133,"results":"20","hashOfConfig":"21"},{"size":813,"mtime":1610626988854,"results":"22","hashOfConfig":"21"},{"size":1053,"mtime":1611240890982,"results":"23","hashOfConfig":"21"},{"size":420,"mtime":1610815710135,"results":"24","hashOfConfig":"21"},{"size":453,"mtime":1610815710123,"results":"25","hashOfConfig":"21"},{"size":717,"mtime":1611240788405,"results":"26","hashOfConfig":"21"},{"size":23,"mtime":1610815710134,"results":"27","hashOfConfig":"21"},{"size":791,"mtime":1611238961134,"results":"28","hashOfConfig":"21"},{"size":362,"mtime":1610449489816,"results":"29","hashOfConfig":"21"},{"size":5460,"mtime":1611332698581,"results":"30","hashOfConfig":"21"},{"size":115,"mtime":1610815710136,"results":"31","hashOfConfig":"21"},{"size":2552,"mtime":1611072271721,"results":"32","hashOfConfig":"21"},{"size":9488,"mtime":1611327591049,"results":"33","hashOfConfig":"21"},{"size":477,"mtime":1611142346689,"results":"34","hashOfConfig":"21"},{"size":562,"mtime":1611076418682,"results":"35","hashOfConfig":"21"},{"size":757,"mtime":1611156761762,"results":"36","hashOfConfig":"21"},{"size":1061,"mtime":1611330944487,"results":"37","hashOfConfig":"21"},{"size":5677,"mtime":1611240931300,"results":"38","hashOfConfig":"21"},{"size":4983,"mtime":1611244831674,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"ix0c9d",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"43"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\Signup.js",["86"],"import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { SignupSchema } from \"../Validation/Validation\";\r\nimport Loader from \"./loader\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\n// import Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { signupUser } from \"../redux/actions\";\r\n\r\n// const regex = /[^A-Za-z]/gi;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  errorText: {\r\n    color: \"red\",\r\n    fontFamily: \"monospace\",\r\n  },\r\n}));\r\n\r\nexport default function SignUp() {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n  const [loading, setLoading] = useState(false);\r\n  let initialValues = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    role: \"Student\",\r\n  };\r\n  const state = useSelector((state) => state.auth);\r\n  const handleSubmit = (e, { resetForm }) => {\r\n    setLoading(true);\r\n\r\n    dispatch(signupUser(e.firstName, e.lastName, e.email, e.password, e.role));\r\n    resetForm({\r\n      values: {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        role: \"\",\r\n      },\r\n    });\r\n  };\r\n  let { signup, login } = state;\r\n  if (signup.error && loading) {\r\n    setLoading(false);\r\n  }\r\n\r\n  if (signup.success || login.success) {\r\n    return <Redirect to=\"/\" />;\r\n  } else {\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign up\r\n          </Typography>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={SignupSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({ values, errors, handleChange, touched, isValid, dirty }) => (\r\n              <Form className={classes.form}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      error={\r\n                        Boolean(errors.firstName) && Boolean(touched.firstName)\r\n                      }\r\n                      autoComplete=\"firstName\"\r\n                      name=\"firstName\"\r\n                      variant=\"outlined\"\r\n                      value={values.firstName}\r\n                      required\r\n                      fullWidth\r\n                      id=\"firstName\"\r\n                      label=\"First Name\"\r\n                      autoFocus\r\n                      helperText={\r\n                        errors.firstName && touched.firstName\r\n                          ? errors.firstName\r\n                          : null\r\n                      }\r\n                      onFocus={() => {\r\n                        signup.errorMsg = \"\";\r\n                        touched.firstName = \"\";\r\n                      }}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      error={\r\n                        Boolean(errors.lastName) && Boolean(touched.lastName)\r\n                      }\r\n                      variant=\"outlined\"\r\n                      required\r\n                      value={values.lastName}\r\n                      fullWidth\r\n                      id=\"lastName\"\r\n                      label=\"Last Name\"\r\n                      name=\"lastName\"\r\n                      autoComplete=\"lastName\"\r\n                      helperText={\r\n                        errors.lastName && touched.lastName\r\n                          ? errors.lastName\r\n                          : null\r\n                      }\r\n                      onFocus={() => {\r\n                        signup.errorMsg = \"\";\r\n                        touched.lastName = \"\";\r\n                      }}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      error={Boolean(errors.email) && Boolean(touched.email)}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      value={values.email}\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"Email\"\r\n                      name=\"email\"\r\n                      autoComplete=\"email\"\r\n                      helperText={\r\n                        errors.email && touched.email ? errors.email : null\r\n                      }\r\n                      onFocus={() => {\r\n                        signup.errorMsg = \"\";\r\n                        touched.email = \"\";\r\n                      }}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      error={\r\n                        Boolean(errors.password) && Boolean(touched.password)\r\n                      }\r\n                      variant=\"outlined\"\r\n                      value={values.password}\r\n                      required\r\n                      fullWidth\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                      helperText={\r\n                        errors.password && touched.password\r\n                          ? errors.password\r\n                          : null\r\n                      }\r\n                      onFocus={() => {\r\n                        signup.errorMsg = \"\";\r\n                        touched.password = \"\";\r\n                      }}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                {signup.error && (\r\n                  <Typography component=\"p\" className={classes.errorText}>\r\n                    {signup.errorMsg}\r\n                  </Typography>\r\n                )}\r\n                <FormControl component=\"fieldset\">\r\n                  <FormLabel component=\"legend\">Role</FormLabel>\r\n                  <RadioGroup\r\n                    aria-label=\"role\"\r\n                    name=\"role\"\r\n                    required\r\n                    value={values.role}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"Student\"\r\n                      control={<Radio />}\r\n                      label=\"Student\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"Company\"\r\n                      control={<Radio />}\r\n                      label=\"Company\"\r\n                    />\r\n                  </RadioGroup>\r\n                </FormControl>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  disabled={!dirty}\r\n                >\r\n                  {!loading ? \"Sign Up\" : <Loader />}\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                  <Grid item>\r\n                    <Link href=\"/login\" variant=\"body2\">\r\n                      Already have an account? Sign in\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n// onChange={(e) => {\r\n//   let value = e.target.value;\r\n//   value = value.replaceAll(regex, \"\");\r\n//   setfirstName(value);\r\n// }}\r\n",["87","88"],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\index.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\App.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\configureStore.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\firebase\\firebase.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\root.js",["89","90","91"],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\actions\\index.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\Constants\\index.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\reportWebVitals.js",[],["92","93"],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\actions\\auth.js",["94","95"],"import Firebase from \"firebase\";\r\nimport {\r\n  LOGIN_FAILURE,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_REQUEST,\r\n  LOGOUT_REQUEST,\r\n  LOGOUT_FAILURE,\r\n  LOGOUT_SUCCESS,\r\n  VERIFY_REQUEST,\r\n  VERIFY_SUCCESS,\r\n  SIGNUP_REQUEST,\r\n  SIGNUP_SUCCESS,\r\n  SIGNUP_FAILURE,\r\n  FORGOT_REQUEST,\r\n  FORGOT_SUCCESS,\r\n} from \"../Constants\";\r\nconst requestLogin = () => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n  };\r\n};\r\n\r\nconst receiveLogin = (user) => {\r\n  return {\r\n    type: LOGIN_SUCCESS,\r\n    payload: { user },\r\n  };\r\n};\r\n\r\nconst loginError = () => {\r\n  return {\r\n    type: LOGIN_FAILURE,\r\n  };\r\n};\r\n\r\nconst requestLogout = () => {\r\n  return {\r\n    type: LOGOUT_REQUEST,\r\n  };\r\n};\r\n\r\nconst receiveLogout = () => {\r\n  return {\r\n    type: LOGOUT_SUCCESS,\r\n  };\r\n};\r\n\r\nconst logoutError = () => {\r\n  return {\r\n    type: LOGOUT_FAILURE,\r\n  };\r\n};\r\n\r\nconst verifyRequest = () => {\r\n  return {\r\n    type: VERIFY_REQUEST,\r\n  };\r\n};\r\n\r\nconst verifySuccess = () => {\r\n  return {\r\n    type: VERIFY_SUCCESS,\r\n  };\r\n};\r\nconst requestSignup = () => {\r\n  return {\r\n    type: SIGNUP_REQUEST,\r\n  };\r\n};\r\nconst receiveSignup = (user) => {\r\n  return {\r\n    type: SIGNUP_SUCCESS,\r\n    payload: { user },\r\n  };\r\n};\r\nconst signupError = (error) => {\r\n  // console.log(error);\r\n  return {\r\n    type: SIGNUP_FAILURE,\r\n    payload: { error },\r\n  };\r\n};\r\nconst requestForgot = () => {\r\n  return {\r\n    type: FORGOT_REQUEST,\r\n  };\r\n};\r\nconst receiveForgot = () => {\r\n  return {\r\n    type: FORGOT_SUCCESS,\r\n  };\r\n};\r\nconst forgotError = () => {\r\n  return {\r\n    type: FORGOT_SUCCESS,\r\n  };\r\n};\r\n// const requestLogin = () => {\r\n//   return {\r\n//     type: LOGIN_REQUEST,\r\n//   };\r\n// };\r\n\r\n// const receiveLogin = (user) => {\r\n//   return {\r\n//     type: LOGIN_SUCCESS,\r\n//     user,\r\n//   };\r\n// };\r\n\r\n// const loginError = () => {\r\n//   return {\r\n//     type: LOGIN_FAILURE,\r\n//   };\r\n// };\r\n\r\n// const requestLogout = () => {\r\n//   return {\r\n//     type: LOGOUT_REQUEST,\r\n//   };\r\n// };\r\n\r\n// const receiveLogout = () => {\r\n//   return {\r\n//     type: LOGOUT_SUCCESS,\r\n//   };\r\n// };\r\n\r\n// const logoutError = () => {\r\n//   return {\r\n//     type: LOGOUT_FAILURE,\r\n//   };\r\n// };\r\n\r\n// const verifyRequest = () => {\r\n//   return {\r\n//     type: VERIFY_REQUEST,\r\n//   };\r\n// };\r\n\r\n// const verifySuccess = () => {\r\n//   return {\r\n//     type: VERIFY_SUCCESS,\r\n//   };\r\n// };\r\n// const requestSignup = () => {\r\n//   return {\r\n//     type: SIGNUP_REQUEST,\r\n//   };\r\n// };\r\n// const receiveSignup = (user) => {\r\n//   return {\r\n//     type: SIGNUP_SUCCESS,\r\n//     user,\r\n//   };\r\n// };\r\n// const signupError = (error) => {\r\n//   // console.log(error);\r\n//   return {\r\n//     type: SIGNUP_FAILURE,\r\n//     signUpError: error.message,\r\n//   };\r\n// };\r\n\r\nexport const loginUser = (email, password, role) => (dispatch) => {\r\n  dispatch(requestLogin());\r\n  // let UID = Firebase.auth().currentUser?.uid;\r\n  Firebase.database()\r\n    .ref(`/Users/${role}`)\r\n    .get()\r\n    .then((snapshot) => {\r\n      const data = snapshot.val();\r\n      const newArray = Object.entries(data);\r\n      const filtered = newArray.filter((val) => email === val[1].email);\r\n      const newEmail = filtered[0][1].email;\r\n      console.log(newEmail);\r\n      if (newEmail === email) {\r\n        Firebase.auth()\r\n          .signInWithEmailAndPassword(email, password)\r\n          .then((user) => {\r\n            console.log(user, \"user\");\r\n            dispatch(receiveLogin(user));\r\n          })\r\n          .catch((error) => {\r\n            dispatch(loginError());\r\n          });\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      dispatch(loginError());\r\n    });\r\n};\r\n\r\nexport const logoutUser = () => (dispatch) => {\r\n  dispatch(requestLogout());\r\n  Firebase.auth()\r\n    .signOut()\r\n    .then(() => {\r\n      dispatch(receiveLogout());\r\n    })\r\n    .catch((error) => {\r\n      dispatch(logoutError());\r\n    });\r\n};\r\n\r\nexport const signupUser = (fname, lname, email, password, role) => (\r\n  dispatch\r\n) => {\r\n  dispatch(requestSignup());\r\n  Firebase.auth()\r\n    .createUserWithEmailAndPassword(email, password)\r\n    .then((user) => {\r\n      dispatch(receiveSignup(user));\r\n      let UID = Firebase.auth().currentUser?.uid;\r\n\r\n      Firebase.database().ref(`/Users/${role}/${UID}`).set({\r\n        uid: UID,\r\n        fname: fname,\r\n        lname: lname,\r\n        email: email,\r\n        password: password,\r\n        role: role,\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      dispatch(signupError(error));\r\n    });\r\n};\r\n\r\nexport const verifyAuth = () => (dispatch) => {\r\n  dispatch(verifyRequest());\r\n  Firebase.auth().onAuthStateChanged((user) => {\r\n    if (user !== null) {\r\n      dispatch(receiveLogin(user));\r\n    }\r\n    dispatch(verifySuccess());\r\n  });\r\n};\r\n\r\nexport const sendResetEmail = (email) => (dispatch) => {\r\n  dispatch(requestForgot());\r\n  Firebase.auth()\r\n    .sendPasswordResetEmail(email)\r\n    .then(() => {\r\n      console.log(\"Success\");\r\n    })\r\n    .catch(() => {\r\n      console.log(\"Error\", Error);\r\n    });\r\n};\r\n\r\n/*            INCOMPLETE WORK                     */\r\n// export const detectRole = (uid) => (dispatch) => {\r\n//   Firebase.database()\r\n//     .ref(`/Users/`)\r\n//     .get()\r\n//     .then((snapshot) => {\r\n//       const data = snapshot.val();\r\n//       const newArray = Object.entries(data);\r\n//       console.log(\"data in obj\", data);\r\n//       console.log(\"data\", newArray);\r\n//       const filtered = newArray.filter((val, ind, arr) => uid === val[1].email);\r\n//       console.log(filtered);\r\n//     });\r\n// };\r\n","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\reducers\\index.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\App.test.js",[],["96","97"],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\Login.js",["98"],"import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { loginUser } from \"../redux/actions\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Loader from \"./loader\";\r\nimport { Form, Formik } from \"formik\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { SigninSchema } from \"../Validation/Validation\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: \"green\",\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  errorText: {\r\n    color: \"red\",\r\n  },\r\n}));\r\n\r\nfunction Login() {\r\n  // let [newEmail, setEmail] = useState(\"\");\r\n  // let [newPassword, setPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  let initialValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n    role: \"Student\",\r\n  };\r\n  const state = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n  const handleSubmit = (values, { resetForm }) => {\r\n    setLoading(true);\r\n    dispatch(loginUser(values.email, values.password, values.role));\r\n    resetForm({\r\n      values: {\r\n        email: \"\",\r\n        password: \"\",\r\n        role: values.role,\r\n      },\r\n    });\r\n  };\r\n\r\n  const { login, signup } = state;\r\n  const classes = useStyles();\r\n  if (login.error && loading) {\r\n    setLoading(false);\r\n  }\r\n  if (login.success || signup.success) {\r\n    return <Redirect to=\"/\" />;\r\n  } else {\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign In\r\n          </Typography>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={SigninSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({ values, errors, handleChange, touched, isValid, dirty }) => (\r\n              <Form className={classes.form}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      error={Boolean(errors.email) && Boolean(touched.email)}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      value={values.email}\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"Email\"\r\n                      name=\"email\"\r\n                      autoComplete=\"email\"\r\n                      helperText={\r\n                        errors.email && touched.email ? errors.email : null\r\n                      }\r\n                      onFocus={() => {\r\n                        login.error = false;\r\n                        touched.email = \"\";\r\n                      }}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      error={\r\n                        Boolean(errors.password) && Boolean(touched.password)\r\n                      }\r\n                      variant=\"outlined\"\r\n                      value={values.password}\r\n                      required\r\n                      fullWidth\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                      helperText={\r\n                        errors.password && touched.password\r\n                          ? errors.password\r\n                          : null\r\n                      }\r\n                      onFocus={() => {\r\n                        login.error = false;\r\n                        touched.password = \"\";\r\n                      }}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                {login.error && !values.email && (\r\n                  <Typography component=\"p\" className={classes.errorText}>\r\n                    Incorrect email or password.\r\n                  </Typography>\r\n                )}\r\n                <FormControl component=\"fieldset\">\r\n                  <FormLabel component=\"legend\">Role</FormLabel>\r\n                  <RadioGroup\r\n                    aria-label=\"role\"\r\n                    name=\"role\"\r\n                    required\r\n                    value={values.role}\r\n                    onChange={handleChange}\r\n                  >\r\n                    <FormControlLabel\r\n                      value=\"Student\"\r\n                      control={<Radio />}\r\n                      label=\"Student\"\r\n                    />\r\n                    <FormControlLabel\r\n                      value=\"Company\"\r\n                      control={<Radio />}\r\n                      label=\"Company\"\r\n                    />\r\n                  </RadioGroup>\r\n                </FormControl>\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  disabled={!dirty}\r\n                >\r\n                  {!loading ? \"Sign in\" : <Loader />}\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                  <Grid item xs>\r\n                    <Link href=\"/forgotPassword\" variant=\"body2\">\r\n                      Forgot password?\r\n                    </Link>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Link href=\"/signup\" variant=\"body2\">\r\n                      {\"Don't have an account? Sign Up\"}\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\n//   if (isAuthenticated) {\r\n//     return <Redirect to=\"/\" />;\r\n//   } else {\r\n//     return (\r\n//       <div>\r\n//         <Container component=\"main\" maxWidth=\"xs\">\r\n//           <Paper className={classes.paper}>\r\n//             <Avatar className={classes.avatar}>\r\n//               <LockOutlinedIcon />\r\n//             </Avatar>\r\n//             <Typography component=\"h1\" variant=\"h5\">\r\n//               Sign in\r\n//             </Typography>\r\n//             <TextField\r\n//               variant=\"outlined\"\r\n//               margin=\"normal\"\r\n//               fullWidth\r\n//               id=\"email\"\r\n//               label=\"Email Address\"\r\n//               name=\"email\"\r\n//               onChange={(e) => setEmail(e.target.value)}\r\n//             />\r\n//             <TextField\r\n//               variant=\"outlined\"\r\n//               margin=\"normal\"\r\n//               fullWidth\r\n//               name=\"password\"\r\n//               label=\"Password\"\r\n//               type=\"password\"\r\n//               id=\"password\"\r\n//               onChange={(e) => setPassword(e.target.value)}\r\n//             />\r\n//             {loginError && (\r\n//               <Typography component=\"p\" className={classes.errorText}>\r\n//                 Incorrect email or password.\r\n//               </Typography>\r\n//             )}\r\n//             {/* <FormControlLabel\r\n//             control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n//             label=\"Remember me\"\r\n//           /> */}\r\n//             <Button\r\n//               type=\"button\"\r\n//               fullWidth\r\n//               variant=\"contained\"\r\n//               color=\"primary\"\r\n//               className={classes.submit}\r\n//               onClick={handleSubmit}\r\n//             >\r\n//               Sign In\r\n//             </Button>\r\n//             <br />\r\n//             <Grid container justify=\"flex-end\">\r\n//               {/* <Grid item xs>\r\n//               <Link href=\"#\" variant=\"body2\">\r\n//                 Forgot password?\r\n//               </Link>\r\n//             </Grid> */}\r\n\r\n// <Grid item>\r\n//   <Link href=\"signup\" variant=\"body2\">\r\n//     {\"Don't have an account? Sign Up\"}\r\n//   </Link>\r\n// </Grid>\r\n//             </Grid>\r\n//           </Paper>\r\n//         </Container>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n// function mapStateToProps(state) {\r\n//     return {\r\n//       isLoggingIn: state.auth.isLoggingIn,\r\n//       loginError: state.auth.loginError,\r\n//       isAuthenticated: state.auth.isAuthenticated\r\n//     };\r\n//   }\r\n\r\nexport default Login;\r\n","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\loader.js",["99"],"import { useState } from \"react\";\r\nimport { css } from \"@emotion/core\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\n\r\n// Can be a string as well. Need to ensure each key-value pair ends with ;\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  //   border-color: red;\r\n`;\r\nconst loading = true;\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div>\r\n      <PuffLoader loading={loading} css={override} size={24} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;\r\n","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\ProtectedRoute.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\Validation\\Validation.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\Home.js",["100","101"],"import { useSelector, useDispatch } from \"react-redux\";\r\nimport { logoutUser } from \"../redux/actions\";\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch();\r\n  const handleLogout = () => {\r\n    dispatch(logoutUser());\r\n  };\r\n\r\n  const state = useSelector((state) => state.auth);\r\n  const { isLoggingOut, logoutError, logout, users } = state;\r\n  //   console.log(user);\r\n  return (\r\n    <div>\r\n      {console.log(users)}\r\n      <h1>This is your app's protected area.🚀🚀🚀</h1>\r\n      <h3>email:{users.user.email} 🚀🚀🚀</h3>\r\n      <h3>uid:{users.user.uid} 🚀🚀🚀🚀🚀 </h3>\r\n      <h3>ROle: {users.user.role}</h3>\r\n      <p>Any routes here will also be protected</p>\r\n      <button onClick={handleLogout}>Logout</button>\r\n      {logout.loading && <p>Logging Out....</p>}\r\n      {logout.error && <p>Error logging out</p>}\r\n    </div>\r\n  );\r\n}\r\n// function mapStateToProps(state) {\r\n//     return {\r\n//       isLoggingOut: state.auth.isLoggingOut,\r\n//       logoutError: state.auth.logoutError\r\n//     };\r\n//   }\r\n\r\nexport default Home;\r\n","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\reducers\\auth.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\forgotPassword.js",[],{"ruleId":"102","severity":1,"message":"103","line":9,"column":13,"nodeType":"104","messageId":"105","endLine":9,"endColumn":16},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"102","severity":1,"message":"110","line":5,"column":8,"nodeType":"104","messageId":"105","endLine":5,"endColumn":12},{"ruleId":"102","severity":1,"message":"111","line":7,"column":8,"nodeType":"104","messageId":"105","endLine":7,"endColumn":14},{"ruleId":"102","severity":1,"message":"112","line":8,"column":8,"nodeType":"104","messageId":"105","endLine":8,"endColumn":22},{"ruleId":"106","replacedBy":"113"},{"ruleId":"108","replacedBy":"114"},{"ruleId":"102","severity":1,"message":"115","line":88,"column":7,"nodeType":"104","messageId":"105","endLine":88,"endColumn":20},{"ruleId":"102","severity":1,"message":"116","line":93,"column":7,"nodeType":"104","messageId":"105","endLine":93,"endColumn":18},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"102","severity":1,"message":"117","line":21,"column":8,"nodeType":"104","messageId":"105","endLine":21,"endColumn":13},{"ruleId":"102","severity":1,"message":"118","line":1,"column":10,"nodeType":"104","messageId":"105","endLine":1,"endColumn":18},{"ruleId":"102","severity":1,"message":"119","line":11,"column":11,"nodeType":"104","messageId":"105","endLine":11,"endColumn":23},{"ruleId":"102","severity":1,"message":"120","line":11,"column":25,"nodeType":"104","messageId":"105","endLine":11,"endColumn":36},"no-unused-vars","'yup' is defined but never used.","Identifier","unusedVar","no-native-reassign",["121"],"no-negated-in-lhs",["122"],"'Form' is defined but never used.","'Loader' is defined but never used.","'ForgotPassword' is defined but never used.",["121"],["122"],"'receiveForgot' is assigned a value but never used.","'forgotError' is assigned a value but never used.","'Paper' is defined but never used.","'useState' is defined but never used.","'isLoggingOut' is assigned a value but never used.","'logoutError' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]