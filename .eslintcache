[{"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\Signup.js":"1","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\index.js":"2","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\App.js":"3","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\configureStore.js":"4","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\firebase\\firebase.js":"5","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\root.js":"6","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\actions\\index.js":"7","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\Constants\\index.js":"8","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\reportWebVitals.js":"9","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\actions\\auth.js":"10","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\reducers\\index.js":"11","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\App.test.js":"12","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\Login.js":"13","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\loader.js":"14","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\ProtectedRoute.js":"15","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\Validation\\Validation.js":"16","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\Home.js":"17","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\reducers\\auth.js":"18"},{"size":8021,"mtime":1611233881010,"results":"19","hashOfConfig":"20"},{"size":813,"mtime":1610626988854,"results":"21","hashOfConfig":"20"},{"size":929,"mtime":1611232831563,"results":"22","hashOfConfig":"20"},{"size":420,"mtime":1610815710135,"results":"23","hashOfConfig":"20"},{"size":453,"mtime":1610815710123,"results":"24","hashOfConfig":"20"},{"size":658,"mtime":1611076426916,"results":"25","hashOfConfig":"20"},{"size":23,"mtime":1610815710134,"results":"26","hashOfConfig":"20"},{"size":642,"mtime":1611221140997,"results":"27","hashOfConfig":"20"},{"size":362,"mtime":1610449489816,"results":"28","hashOfConfig":"20"},{"size":3894,"mtime":1611233112300,"results":"29","hashOfConfig":"20"},{"size":115,"mtime":1610815710136,"results":"30","hashOfConfig":"20"},{"size":2552,"mtime":1611072271721,"results":"31","hashOfConfig":"20"},{"size":8225,"mtime":1611234727211,"results":"32","hashOfConfig":"20"},{"size":477,"mtime":1611077071275,"results":"33","hashOfConfig":"20"},{"size":562,"mtime":1611076418682,"results":"34","hashOfConfig":"20"},{"size":757,"mtime":1611156761762,"results":"35","hashOfConfig":"20"},{"size":993,"mtime":1611233186565,"results":"36","hashOfConfig":"20"},{"size":5182,"mtime":1611234058729,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"ix0c9d",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\Signup.js",["84"],"import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as yup from \"yup\";\r\nimport { SignupSchema } from \"../Validation/Validation\";\r\nimport Loader from \"./loader\";\r\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\r\n// import Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { signupUser } from \"../redux/actions\";\r\n\r\n// const regex = /[^A-Za-z]/gi;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  errorText: {\r\n    color: \"red\",\r\n    fontFamily: \"monospace\",\r\n  },\r\n}));\r\n\r\nexport default function SignUp() {\r\n  const classes = useStyles();\r\n\r\n  const dispatch = useDispatch();\r\n  const [loading, setLoading] = useState(false);\r\n  let initialValues = {\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n  const state = useSelector((state) => state.auth);\r\n  const handleSubmit = (e, { resetForm }) => {\r\n    setLoading(true);\r\n\r\n    dispatch(signupUser(e.firstName, e.lastName, e.email, e.password));\r\n    resetForm({\r\n      values: {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n      },\r\n    });\r\n  };\r\n  let { signup, login } = state;\r\n  if (signup.error && loading) {\r\n    setLoading(false);\r\n  }\r\n\r\n  if (signup.success || login.success) {\r\n    return <Redirect to=\"/\" />;\r\n  } else {\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign up\r\n          </Typography>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={SignupSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({ values, errors, handleChange, touched, isValid, dirty }) => (\r\n              <Form className={classes.form}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      error={\r\n                        Boolean(errors.firstName) && Boolean(touched.firstName)\r\n                      }\r\n                      autoComplete=\"firstName\"\r\n                      name=\"firstName\"\r\n                      variant=\"outlined\"\r\n                      value={values.firstName}\r\n                      required\r\n                      fullWidth\r\n                      id=\"firstName\"\r\n                      label=\"First Name\"\r\n                      autoFocus\r\n                      helperText={\r\n                        errors.firstName && touched.firstName\r\n                          ? errors.firstName\r\n                          : null\r\n                      }\r\n                      onFocus={() => {\r\n                        signup.errorMsg = \"\";\r\n                        touched.firstName = \"\";\r\n                      }}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                      error={\r\n                        Boolean(errors.lastName) && Boolean(touched.lastName)\r\n                      }\r\n                      variant=\"outlined\"\r\n                      required\r\n                      value={values.lastName}\r\n                      fullWidth\r\n                      id=\"lastName\"\r\n                      label=\"Last Name\"\r\n                      name=\"lastName\"\r\n                      autoComplete=\"lastName\"\r\n                      helperText={\r\n                        errors.lastName && touched.lastName\r\n                          ? errors.lastName\r\n                          : null\r\n                      }\r\n                      onFocus={() => {\r\n                        signup.errorMsg = \"\";\r\n                        touched.lastName = \"\";\r\n                      }}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      error={Boolean(errors.email) && Boolean(touched.email)}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      value={values.email}\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"Email\"\r\n                      name=\"email\"\r\n                      autoComplete=\"email\"\r\n                      helperText={\r\n                        errors.email && touched.email ? errors.email : null\r\n                      }\r\n                      onFocus={() => {\r\n                        signup.errorMsg = \"\";\r\n                        touched.email = \"\";\r\n                      }}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      error={\r\n                        Boolean(errors.password) && Boolean(touched.password)\r\n                      }\r\n                      variant=\"outlined\"\r\n                      value={values.password}\r\n                      required\r\n                      fullWidth\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                      helperText={\r\n                        errors.password && touched.password\r\n                          ? errors.password\r\n                          : null\r\n                      }\r\n                      onFocus={() => {\r\n                        signup.errorMsg = \"\";\r\n                        touched.password = \"\";\r\n                      }}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                {/* {console.log(errors)} */}\r\n                {signup.error && (\r\n                  <Typography component=\"p\" className={classes.errorText}>\r\n                    {signup.errorMsg}\r\n                  </Typography>\r\n                )}\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  disabled={!dirty}\r\n                >\r\n                  {!loading ? \"Sign Up\" : <Loader />}\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                  <Grid item>\r\n                    <Link href=\"/login\" variant=\"body2\">\r\n                      Already have an account? Sign in\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n// onChange={(e) => {\r\n//   let value = e.target.value;\r\n//   value = value.replaceAll(regex, \"\");\r\n//   setfirstName(value);\r\n// }}\r\n","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\index.js",[],["85","86"],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\App.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\configureStore.js",[],["87","88"],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\firebase\\firebase.js",[],["89","90"],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\root.js",["91","92"],"import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport Firebase from \"firebase\";\r\nimport Form from \"./App.test\";\r\nimport App from \"./App\";\r\nimport Loader from \"./components/loader\";\r\n// import Signup from \"./components/Signup\"\r\nimport { firebaseConfig } from \"./firebase/firebase\";\r\nimport configureStore from \"./redux/configureStore\";\r\n\r\nFirebase.initializeApp(firebaseConfig);\r\n\r\nconst store = configureStore();\r\n\r\nfunction Root() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  );\r\n}\r\nexport default Root;\r\n","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\actions\\index.js",[],["93","94"],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\Constants\\index.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\reportWebVitals.js",[],["95","96"],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\actions\\auth.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\reducers\\index.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\App.test.js",[],["97","98"],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\Login.js",["99"],"import { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { loginUser } from \"../redux/actions\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Loader from \"./loader\";\r\nimport { Form, Formik } from \"formik\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { SigninSchema } from \"../Validation/Validation\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: \"green\",\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  errorText: {\r\n    color: \"red\",\r\n  },\r\n}));\r\n\r\nfunction Login() {\r\n  // let [newEmail, setEmail] = useState(\"\");\r\n  // let [newPassword, setPassword] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  let initialValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n  const state = useSelector((state) => state.auth);\r\n  const dispatch = useDispatch();\r\n  const handleSubmit = (values, { resetForm }) => {\r\n    setLoading(true);\r\n    dispatch(loginUser(values.email, values.password));\r\n    resetForm({\r\n      values: {\r\n        email: \"\",\r\n        password: \"\",\r\n      },\r\n    });\r\n  };\r\n\r\n  const { login, signup } = state;\r\n  const classes = useStyles();\r\n  if (login.error && loading) {\r\n    setLoading(false);\r\n  }\r\n  if (login.success || signup.success) {\r\n    return <Redirect to=\"/\" />;\r\n  } else {\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign In\r\n          </Typography>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validationSchema={SigninSchema}\r\n            onSubmit={handleSubmit}\r\n          >\r\n            {({ values, errors, handleChange, touched, isValid, dirty }) => (\r\n              <Form className={classes.form}>\r\n                <Grid container spacing={2}>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      error={Boolean(errors.email) && Boolean(touched.email)}\r\n                      variant=\"outlined\"\r\n                      required\r\n                      value={values.email}\r\n                      fullWidth\r\n                      id=\"email\"\r\n                      label=\"Email\"\r\n                      name=\"email\"\r\n                      autoComplete=\"email\"\r\n                      helperText={\r\n                        errors.email && touched.email ? errors.email : null\r\n                      }\r\n                      onFocus={() => {\r\n                        // loginError = false;\r\n                        login.error = false;\r\n                        touched.email = \"\";\r\n                      }}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12}>\r\n                    <TextField\r\n                      error={\r\n                        Boolean(errors.password) && Boolean(touched.password)\r\n                      }\r\n                      variant=\"outlined\"\r\n                      value={values.password}\r\n                      required\r\n                      fullWidth\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      autoComplete=\"current-password\"\r\n                      helperText={\r\n                        errors.password && touched.password\r\n                          ? errors.password\r\n                          : null\r\n                      }\r\n                      onFocus={() => {\r\n                        // loginError = false;\r\n                        touched.password = \"\";\r\n                      }}\r\n                      onChange={handleChange}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                {login.error && !values.email && (\r\n                  <Typography component=\"p\" className={classes.errorText}>\r\n                    Incorrect email or password.\r\n                  </Typography>\r\n                )}\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  className={classes.submit}\r\n                  disabled={!dirty}\r\n                >\r\n                  {!loading ? \"Sign in\" : <Loader />}\r\n                </Button>\r\n                <Grid container justify=\"flex-end\">\r\n                  <Grid item>\r\n                    <Link href=\"/signup\" variant=\"body2\">\r\n                      {\"Don't have an account? Sign Up\"}\r\n                    </Link>\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\n//   if (isAuthenticated) {\r\n//     return <Redirect to=\"/\" />;\r\n//   } else {\r\n//     return (\r\n//       <div>\r\n//         <Container component=\"main\" maxWidth=\"xs\">\r\n//           <Paper className={classes.paper}>\r\n//             <Avatar className={classes.avatar}>\r\n//               <LockOutlinedIcon />\r\n//             </Avatar>\r\n//             <Typography component=\"h1\" variant=\"h5\">\r\n//               Sign in\r\n//             </Typography>\r\n//             <TextField\r\n//               variant=\"outlined\"\r\n//               margin=\"normal\"\r\n//               fullWidth\r\n//               id=\"email\"\r\n//               label=\"Email Address\"\r\n//               name=\"email\"\r\n//               onChange={(e) => setEmail(e.target.value)}\r\n//             />\r\n//             <TextField\r\n//               variant=\"outlined\"\r\n//               margin=\"normal\"\r\n//               fullWidth\r\n//               name=\"password\"\r\n//               label=\"Password\"\r\n//               type=\"password\"\r\n//               id=\"password\"\r\n//               onChange={(e) => setPassword(e.target.value)}\r\n//             />\r\n//             {loginError && (\r\n//               <Typography component=\"p\" className={classes.errorText}>\r\n//                 Incorrect email or password.\r\n//               </Typography>\r\n//             )}\r\n//             {/* <FormControlLabel\r\n//             control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n//             label=\"Remember me\"\r\n//           /> */}\r\n//             <Button\r\n//               type=\"button\"\r\n//               fullWidth\r\n//               variant=\"contained\"\r\n//               color=\"primary\"\r\n//               className={classes.submit}\r\n//               onClick={handleSubmit}\r\n//             >\r\n//               Sign In\r\n//             </Button>\r\n//             <br />\r\n//             <Grid container justify=\"flex-end\">\r\n//               {/* <Grid item xs>\r\n//               <Link href=\"#\" variant=\"body2\">\r\n//                 Forgot password?\r\n//               </Link>\r\n//             </Grid> */}\r\n\r\n// <Grid item>\r\n//   <Link href=\"signup\" variant=\"body2\">\r\n//     {\"Don't have an account? Sign Up\"}\r\n//   </Link>\r\n// </Grid>\r\n//             </Grid>\r\n//           </Paper>\r\n//         </Container>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n// function mapStateToProps(state) {\r\n//     return {\r\n//       isLoggingIn: state.auth.isLoggingIn,\r\n//       loginError: state.auth.loginError,\r\n//       isAuthenticated: state.auth.isAuthenticated\r\n//     };\r\n//   }\r\n\r\nexport default Login;\r\n","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\loader.js",["100"],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\ProtectedRoute.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\Validation\\Validation.js",[],"E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\components\\Home.js",["101","102"],"import { useSelector, useDispatch } from \"react-redux\";\r\nimport { logoutUser } from \"../redux/actions\";\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch();\r\n  const handleLogout = () => {\r\n    dispatch(logoutUser());\r\n  };\r\n\r\n  const state = useSelector((state) => state.auth);\r\n  const { isLoggingOut, logoutError, logout, users } = state;\r\n  //   console.log(user);\r\n  return (\r\n    <div>\r\n      <h1>This is your app's protected area.🚀🚀🚀</h1>\r\n      <h3>email:{users.user.email} 🚀🚀🚀</h3>\r\n      <h3>uid:{users.user.uid} 🚀🚀🚀🚀🚀 </h3>\r\n      <p>Any routes here will also be protected</p>\r\n      <button onClick={handleLogout}>Logout</button>\r\n      {logout.loading && <p>Logging Out....</p>}\r\n      {logout.error && <p>Error logging out</p>}\r\n    </div>\r\n  );\r\n}\r\n// function mapStateToProps(state) {\r\n//     return {\r\n//       isLoggingOut: state.auth.isLoggingOut,\r\n//       logoutError: state.auth.logoutError\r\n//     };\r\n//   }\r\n\r\nexport default Home;\r\n","E:\\Bootcamp\\project\\signup-signin-dashboard\\src\\redux\\reducers\\auth.js",[],{"ruleId":"103","severity":1,"message":"104","line":9,"column":13,"nodeType":"105","messageId":"106","endLine":9,"endColumn":16},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"107","replacedBy":"111"},{"ruleId":"109","replacedBy":"112"},{"ruleId":"107","replacedBy":"113"},{"ruleId":"109","replacedBy":"114"},{"ruleId":"103","severity":1,"message":"115","line":5,"column":8,"nodeType":"105","messageId":"106","endLine":5,"endColumn":12},{"ruleId":"103","severity":1,"message":"116","line":7,"column":8,"nodeType":"105","messageId":"106","endLine":7,"endColumn":14},{"ruleId":"107","replacedBy":"117"},{"ruleId":"109","replacedBy":"118"},{"ruleId":"107","replacedBy":"119"},{"ruleId":"109","replacedBy":"120"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"103","severity":1,"message":"121","line":16,"column":8,"nodeType":"105","messageId":"106","endLine":16,"endColumn":13},{"ruleId":"103","severity":1,"message":"122","line":1,"column":10,"nodeType":"105","messageId":"106","endLine":1,"endColumn":18},{"ruleId":"103","severity":1,"message":"123","line":11,"column":11,"nodeType":"105","messageId":"106","endLine":11,"endColumn":23},{"ruleId":"103","severity":1,"message":"124","line":11,"column":25,"nodeType":"105","messageId":"106","endLine":11,"endColumn":36},"no-unused-vars","'yup' is defined but never used.","Identifier","unusedVar","no-native-reassign",["125"],"no-negated-in-lhs",["126"],["125"],["126"],["125"],["126"],"'Form' is defined but never used.","'Loader' is defined but never used.",["125"],["126"],["125"],["126"],"'Paper' is defined but never used.","'useState' is defined but never used.","'isLoggingOut' is assigned a value but never used.","'logoutError' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]